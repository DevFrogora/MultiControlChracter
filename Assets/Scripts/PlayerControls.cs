//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Land"",
            ""id"": ""e547b94a-a70b-4f0d-bc3e-f794346c11b6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""72bdbf45-f19a-4908-823b-651409008571"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2e6a09a9-416c-4cb0-b8d6-911784307570"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""0b9fb8cb-fd65-4f74-86c0-371575c4bc7f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""67575695-9595-4869-8f0f-275b71548314"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.9,max=0.9)"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2356aabe-8c80-4506-a578-c2d4a1dbc3f9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ce61bdff-a427-40fc-a6c1-838a42c89b50"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""98b8ddcd-87c1-4909-b400-afa6c8612449"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""40e2b89f-fed9-4521-b620-c490e610be7e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""7db98c06-07d4-4824-af30-58755e1d9712"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""35898eda-334b-4933-b179-01936d502ca1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7aa3bab6-ff86-40d9-b67c-15265ef87143"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cdeff028-9298-4b3a-b8aa-532b3dd243e7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c665a4be-33e1-4b53-b4c3-53fc48940e93"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b411d809-bcb7-48ca-b428-fd0fc9c8d8b4"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb70b14c-4314-409f-a8e3-64cdac506f93"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""205f7a43-7a6d-4998-832c-355db22836c3"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a10b36f-a896-4365-be9b-16ec25c38b2f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Water"",
            ""id"": ""709f61d3-0857-48b4-8136-5465b1c45ee4"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""cf793ac5-58dc-4891-85fa-47ec6733a3e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f8af1bdf-31ca-4f6e-9c11-01b23814afd8"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CarDriving"",
            ""id"": ""2bbf723f-b95a-47bc-a670-e050b20be89b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a4211048-6bd9-4984-9483-0d34e5dd6000"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""aaa0a7eb-fbb2-4dcc-9a28-3ccddd87ea15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e5a5d225-39a0-43fa-b9d8-72e4a1266794"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.9,max=0.9)"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c1d04d67-a4d6-45c2-9804-a803e78aae7d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""da0122d9-4581-40d0-99ba-626a1f9206f8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f04469fb-43c9-4f65-a7cc-9442c124615a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6fbb5217-abff-4a4b-b3de-08a09bc0841e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""6fd43712-11d9-41b6-bc6e-9af4e89de4f1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f702aca0-adf1-45ba-952d-b7b493c5b5c9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""43efc07d-ed08-4dc9-9b10-3af32feebbea"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6fc1482e-3be7-4117-9fc3-5b4c8af77ffc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2fc11828-c33f-420f-b70b-07c25ad6fda1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""24f73a12-8ec1-4d54-a30e-2c55bbfca890"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e2323ac-22ba-4df4-b0db-e66a267f6f68"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BikeDriving"",
            ""id"": ""b51d1499-8502-41bc-aad6-c59ddca476bf"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""42531011-14fd-4670-852d-06a3917bbe7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e68f6508-26c7-4484-ae0d-e2fb17affc59"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlaneControl"",
            ""id"": ""e9b53af3-268e-427e-b787-b1ff6a480f11"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""336de163-fc0b-4939-b443-c6dbaedbf021"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1dba4b9e-7dda-4d8b-bbcb-ceb01a1d0684"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gliding"",
            ""id"": ""9dffa6ab-4fff-4bde-8a63-885d90593298"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d644ac67-bc09-4bb2-af3a-08eeaec22142"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""6639fa9e-d04a-4c9c-833a-7cf00d4dc7e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Open"",
                    ""type"": ""Button"",
                    ""id"": ""a7dcb655-ad2d-40d4-b69f-47375eee15f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""bac03629-3ce8-4134-a9c3-582c474c0bce"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""48d7447a-0c0c-4255-817c-db430921f208"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ef37496e-67a9-4c83-9473-1baf87400b74"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""543ff2b3-ad59-49a4-bc09-420c5e544b55"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d5e80c33-be42-4eb9-8559-d0b49c38fa17"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ed523b15-0a12-4328-8795-eb8ba677df8b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76805d90-852e-4415-bf94-71fade4068db"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Parachute"",
            ""id"": ""6f66810b-1f93-49a9-a11c-a380f9b4e26a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""2e812f72-2c22-4e80-8f09-659a1fc6c391"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""a4e32b58-63c3-4b9c-837c-1525fb6b8c5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open"",
                    ""type"": ""Button"",
                    ""id"": ""ccfb8f35-5ab3-4836-b4ce-4af3e6852857"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""fb7d8978-855a-47a9-816b-0ecdb13c89b2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bae33554-6860-468d-95ab-61e0639b38c0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aa8f2492-6b7c-4895-99ec-f0e54a66d5cb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7ceae51b-058a-4b13-8829-3b57a80a3d24"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2c974efa-4750-41ed-af30-7602ef781912"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7ce1f940-7f13-428e-8bc2-8fa5daef37db"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e97b1c5-305d-467b-a784-0202c5aea6af"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Land
        m_Land = asset.FindActionMap("Land", throwIfNotFound: true);
        m_Land_Move = m_Land.FindAction("Move", throwIfNotFound: true);
        m_Land_Jump = m_Land.FindAction("Jump", throwIfNotFound: true);
        m_Land_Look = m_Land.FindAction("Look", throwIfNotFound: true);
        // Water
        m_Water = asset.FindActionMap("Water", throwIfNotFound: true);
        m_Water_Newaction = m_Water.FindAction("New action", throwIfNotFound: true);
        // CarDriving
        m_CarDriving = asset.FindActionMap("CarDriving", throwIfNotFound: true);
        m_CarDriving_Move = m_CarDriving.FindAction("Move", throwIfNotFound: true);
        m_CarDriving_Exit = m_CarDriving.FindAction("Exit", throwIfNotFound: true);
        // BikeDriving
        m_BikeDriving = asset.FindActionMap("BikeDriving", throwIfNotFound: true);
        m_BikeDriving_Newaction = m_BikeDriving.FindAction("New action", throwIfNotFound: true);
        // PlaneControl
        m_PlaneControl = asset.FindActionMap("PlaneControl", throwIfNotFound: true);
        m_PlaneControl_Jump = m_PlaneControl.FindAction("Jump", throwIfNotFound: true);
        // Gliding
        m_Gliding = asset.FindActionMap("Gliding", throwIfNotFound: true);
        m_Gliding_Move = m_Gliding.FindAction("Move", throwIfNotFound: true);
        m_Gliding_Look = m_Gliding.FindAction("Look", throwIfNotFound: true);
        m_Gliding_Open = m_Gliding.FindAction("Open", throwIfNotFound: true);
        // Parachute
        m_Parachute = asset.FindActionMap("Parachute", throwIfNotFound: true);
        m_Parachute_Move = m_Parachute.FindAction("Move", throwIfNotFound: true);
        m_Parachute_Exit = m_Parachute.FindAction("Exit", throwIfNotFound: true);
        m_Parachute_Open = m_Parachute.FindAction("Open", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Land
    private readonly InputActionMap m_Land;
    private ILandActions m_LandActionsCallbackInterface;
    private readonly InputAction m_Land_Move;
    private readonly InputAction m_Land_Jump;
    private readonly InputAction m_Land_Look;
    public struct LandActions
    {
        private @PlayerControls m_Wrapper;
        public LandActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Land_Move;
        public InputAction @Jump => m_Wrapper.m_Land_Jump;
        public InputAction @Look => m_Wrapper.m_Land_Look;
        public InputActionMap Get() { return m_Wrapper.m_Land; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LandActions set) { return set.Get(); }
        public void SetCallbacks(ILandActions instance)
        {
            if (m_Wrapper.m_LandActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_LandActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_LandActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_LandActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_LandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public LandActions @Land => new LandActions(this);

    // Water
    private readonly InputActionMap m_Water;
    private IWaterActions m_WaterActionsCallbackInterface;
    private readonly InputAction m_Water_Newaction;
    public struct WaterActions
    {
        private @PlayerControls m_Wrapper;
        public WaterActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Water_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Water; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WaterActions set) { return set.Get(); }
        public void SetCallbacks(IWaterActions instance)
        {
            if (m_Wrapper.m_WaterActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_WaterActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_WaterActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_WaterActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_WaterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public WaterActions @Water => new WaterActions(this);

    // CarDriving
    private readonly InputActionMap m_CarDriving;
    private ICarDrivingActions m_CarDrivingActionsCallbackInterface;
    private readonly InputAction m_CarDriving_Move;
    private readonly InputAction m_CarDriving_Exit;
    public struct CarDrivingActions
    {
        private @PlayerControls m_Wrapper;
        public CarDrivingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CarDriving_Move;
        public InputAction @Exit => m_Wrapper.m_CarDriving_Exit;
        public InputActionMap Get() { return m_Wrapper.m_CarDriving; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarDrivingActions set) { return set.Get(); }
        public void SetCallbacks(ICarDrivingActions instance)
        {
            if (m_Wrapper.m_CarDrivingActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CarDrivingActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CarDrivingActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CarDrivingActionsCallbackInterface.OnMove;
                @Exit.started -= m_Wrapper.m_CarDrivingActionsCallbackInterface.OnExit;
                @Exit.performed -= m_Wrapper.m_CarDrivingActionsCallbackInterface.OnExit;
                @Exit.canceled -= m_Wrapper.m_CarDrivingActionsCallbackInterface.OnExit;
            }
            m_Wrapper.m_CarDrivingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
            }
        }
    }
    public CarDrivingActions @CarDriving => new CarDrivingActions(this);

    // BikeDriving
    private readonly InputActionMap m_BikeDriving;
    private IBikeDrivingActions m_BikeDrivingActionsCallbackInterface;
    private readonly InputAction m_BikeDriving_Newaction;
    public struct BikeDrivingActions
    {
        private @PlayerControls m_Wrapper;
        public BikeDrivingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_BikeDriving_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_BikeDriving; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BikeDrivingActions set) { return set.Get(); }
        public void SetCallbacks(IBikeDrivingActions instance)
        {
            if (m_Wrapper.m_BikeDrivingActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_BikeDrivingActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_BikeDrivingActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_BikeDrivingActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_BikeDrivingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public BikeDrivingActions @BikeDriving => new BikeDrivingActions(this);

    // PlaneControl
    private readonly InputActionMap m_PlaneControl;
    private IPlaneControlActions m_PlaneControlActionsCallbackInterface;
    private readonly InputAction m_PlaneControl_Jump;
    public struct PlaneControlActions
    {
        private @PlayerControls m_Wrapper;
        public PlaneControlActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PlaneControl_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PlaneControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlaneControlActions set) { return set.Get(); }
        public void SetCallbacks(IPlaneControlActions instance)
        {
            if (m_Wrapper.m_PlaneControlActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlaneControlActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlaneControlActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlaneControlActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_PlaneControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public PlaneControlActions @PlaneControl => new PlaneControlActions(this);

    // Gliding
    private readonly InputActionMap m_Gliding;
    private IGlidingActions m_GlidingActionsCallbackInterface;
    private readonly InputAction m_Gliding_Move;
    private readonly InputAction m_Gliding_Look;
    private readonly InputAction m_Gliding_Open;
    public struct GlidingActions
    {
        private @PlayerControls m_Wrapper;
        public GlidingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gliding_Move;
        public InputAction @Look => m_Wrapper.m_Gliding_Look;
        public InputAction @Open => m_Wrapper.m_Gliding_Open;
        public InputActionMap Get() { return m_Wrapper.m_Gliding; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlidingActions set) { return set.Get(); }
        public void SetCallbacks(IGlidingActions instance)
        {
            if (m_Wrapper.m_GlidingActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GlidingActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GlidingActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GlidingActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_GlidingActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_GlidingActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_GlidingActionsCallbackInterface.OnLook;
                @Open.started -= m_Wrapper.m_GlidingActionsCallbackInterface.OnOpen;
                @Open.performed -= m_Wrapper.m_GlidingActionsCallbackInterface.OnOpen;
                @Open.canceled -= m_Wrapper.m_GlidingActionsCallbackInterface.OnOpen;
            }
            m_Wrapper.m_GlidingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Open.started += instance.OnOpen;
                @Open.performed += instance.OnOpen;
                @Open.canceled += instance.OnOpen;
            }
        }
    }
    public GlidingActions @Gliding => new GlidingActions(this);

    // Parachute
    private readonly InputActionMap m_Parachute;
    private IParachuteActions m_ParachuteActionsCallbackInterface;
    private readonly InputAction m_Parachute_Move;
    private readonly InputAction m_Parachute_Exit;
    private readonly InputAction m_Parachute_Open;
    public struct ParachuteActions
    {
        private @PlayerControls m_Wrapper;
        public ParachuteActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Parachute_Move;
        public InputAction @Exit => m_Wrapper.m_Parachute_Exit;
        public InputAction @Open => m_Wrapper.m_Parachute_Open;
        public InputActionMap Get() { return m_Wrapper.m_Parachute; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ParachuteActions set) { return set.Get(); }
        public void SetCallbacks(IParachuteActions instance)
        {
            if (m_Wrapper.m_ParachuteActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_ParachuteActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ParachuteActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ParachuteActionsCallbackInterface.OnMove;
                @Exit.started -= m_Wrapper.m_ParachuteActionsCallbackInterface.OnExit;
                @Exit.performed -= m_Wrapper.m_ParachuteActionsCallbackInterface.OnExit;
                @Exit.canceled -= m_Wrapper.m_ParachuteActionsCallbackInterface.OnExit;
                @Open.started -= m_Wrapper.m_ParachuteActionsCallbackInterface.OnOpen;
                @Open.performed -= m_Wrapper.m_ParachuteActionsCallbackInterface.OnOpen;
                @Open.canceled -= m_Wrapper.m_ParachuteActionsCallbackInterface.OnOpen;
            }
            m_Wrapper.m_ParachuteActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
                @Open.started += instance.OnOpen;
                @Open.performed += instance.OnOpen;
                @Open.canceled += instance.OnOpen;
            }
        }
    }
    public ParachuteActions @Parachute => new ParachuteActions(this);
    public interface ILandActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IWaterActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface ICarDrivingActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
    public interface IBikeDrivingActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IPlaneControlActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IGlidingActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnOpen(InputAction.CallbackContext context);
    }
    public interface IParachuteActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
        void OnOpen(InputAction.CallbackContext context);
    }
}
